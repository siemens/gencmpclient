#!/usr/bin/make

PERL=/usr/bin/perl

ifeq ($(OS),Windows_NT)
    EXE=.exe
    DLL=.dll
    OBJ=.obj
#   LIB=bin
    PINGCOUNTOPT=-n
else
    EXE=
    DLL=.so
    OBJ=.o
#   LIB=lib
    PINGCOUNTOPT=-c
endif

# defaults for tests:
OPENSSL ?= openssl$(EXE)
OUTBIN  ?= cmpClient$(EXE)

# optional SET_PROXY variable can be set to override default proxy settings
SET_PROXY ?= no_proxy=localhost,127.0.0.1

# LightweightCmpRa #############################################################

LWCMPRA_DIR=LightweightCmpRa
CMPRACOMP_DIR=cmp-ra-component

$(LWCMPRA_DIR)/pom.xml:
	git submodule update $(GIT_PROGRESS) --init --depth 1 $(LWCMPRA_DIR)
$(CMPRACOMP_DIR)/pom.xml:
	git submodule update $(GIT_PROGRESS) --init --depth 1 $(CMPRACOMP_DIR)

LWCMPRA_JAR=$(LWCMPRA_DIR)/target/LightweightCmpRa-2.3.0.jar # TODO make version flexible
$(LWCMPRA_JAR): $(LWCMPRA_DIR)/pom.xml
	cd $(LWCMPRA_DIR) && mvn clean install -DskipTests=true
CMPRACOMP_JAR=$(CMPRACOMP_DIR)/target/CmpRaComponent-2.2.1.jar # TODO make version flexible
$(CMPRACOMP_JAR): $(CMPRACOMP_DIR)/pom.xml
	cd $(CMPRACOMP_DIR) && mvn clean install -DskipTests=true

LWCMPRA_JAR ?= $(LWCMPRA_JAR) # was: ./LightweightCmpRa.jar
LWCMPRA_RUN = java -jar $(LWCMPRA_JAR)
# may insert before -jar: -Dorg.slf4j.simpleLogger.log.com.siemens.pki.cmpracomponent.msgprocessing.CmpRaImplementation=trace
CMPCAMOCK_JAR ?= ./CmpCaMock.jar # TODO: $(LWCMPRA_DIR)/target/??
CMPCAMOCK_RUN = java -jar $(CMPCAMOCK_JAR)

.phony: tests_LwCmp
tests_LwCmp:
ifneq ("$(wildcard $(CMPCAMOCK_JAR))","")
tests_LwCmp: start_LwCmp conformance_cmpclient conformance_openssl test_LwCmp stop_LwCmp
endif

.phony: start_LwCmp stop_LwCmp
start_LwCmp: $(CMPRACOMP_JAR) $(LWCMPRA_JAR)
	@echo starting LightweightCmpRA
	@ #mkdir test/Upstream test/Downstream 2>/dev/null || true
	@$(LWCMPRA_RUN) config/tests.yml &
	@echo starting CmpCaMock
	@$(CMPCAMOCK_RUN) . http://localhost:7000/ca credentials/ENROLL_Keystore.p12 credentials/CMP_CA_Keystore.p12 &
	@sleep 2
stop_LwCmp:
	@PID=`ps aux|grep "$(LWCMPRA_RUN)"   | grep -v grep | awk '{ print $$2 }'` && \
	if [ -n "$$PID" ]; then echo "stopping LightweightCmpRA" && kill $$PID; fi
	@PID=`ps aux|grep "$(CMPCAMOCK_RUN)" | grep -v grep | awk '{ print $$2 }'` && \
	if [ -n "$$PID" ]; then echo "stopping CmpCaMock" && kill $$PID; fi

# conformance ##################################################################

GENERATE_OPERATIONAL=$(OPENSSL) x509 -in creds/operational.crt -x509toreq -signkey creds/operational.pem -out creds/operational.csr -passin pass:12345 2>/dev/null
CMPCLNT = LD_LIBRARY_PATH=. ./$(OUTBIN) -section CmpRa,
CMPOSSL = $(OPENSSL) cmp -config config/demo.cnf -section CmpRa,
.phony: test_conformance_openssl test_conformance_cmpclient test_conformance
test_conformance_openssl:   start_LwCmp conformance_openssl   stop_LwCmp
test_conformance_cmpclient: start_LwCmp conformance_cmpclient stop_LwCmp
test_conformance: start_LwCmp conformance_cmpclient conformance_openssl stop_LwCmp
.phony: newkey conformance_openssl conformance_cmpclient conformance
newkey:
	@which $(OPENSSL) >/dev/null || (echo "cannot find $(OPENSSL), please install it"; false)
	@$(OPENSSL) ecparam -genkey -name secp521r1 -out creds/manufacturer.pem
	@$(OPENSSL) ecparam -genkey -name prime256v1 -out creds/operational.pem
conformance_openssl: newkey
	@CMPCL="$(CMPOSSL)" $(MAKE) -f Makefile_tests conformance
conformance_cmpclient:
	@CMPCL="$(CMPCLNT)" $(MAKE) -f Makefile_tests conformance
conformance: $(OUTBIN)
	$(CMPCL)imprint            -verbosity 3
	$(CMPCL)bootstrap          -verbosity 3
	@$(GENERATE_OPERATIONAL)
	$(CMPCL)pkcs10             -verbosity 3
	$(CMPCL)update -path /lra  -verbosity 3
	$(CMPCL)revoke -path /lra  -verbosity 3
	@ # $(CMPCL)bootstrap      -verbosity 3 -server localhost:6003/delayedlra

# cli ##########################################################################

OPENSSL_CMP_CONFIG ?= test.cnf
.phony: test_cli
test_cli: $(OUTBIN)
	@which $(PERL) || (echo "cannot find Perl, please install it"; false)
	@echo -en "\n#### running CLI-based tests #### "
	@if [ -n "$$OPENSSL_CMP_SERVER" ]; then echo -en "with server=$$OPENSSL_CMP_SERVER"; else echo -n "without server"; fi
	@echo -e " in test/recipes/80-test_cmp_http_data/$$OPENSSL_CMP_SERVER"
	@ :
	( HARNESS_ACTIVE=1 \
	  HARNESS_VERBOSE=$(V) \
	  HARNESS_FAILLOG=../test/faillog_$$OPENSSL_CMP_SERVER.txt \
	  SRCTOP=. \
	  BLDTOP=. \
	  BIN_D=. \
	  EXE_EXT= \
	  LD_LIBRARY_PATH=$(BIN_D) \
	  OPENSSL_CMP_CONFIG=$(OPENSSL_CMP_CONFIG) \
	  $(PERL) test/recipes/80-test_cmp_http.t )
	@ :

# Mock #########################################################################

# uses $(OPENSSL) as binary of mock server
.phony: test_Mock
test_Mock:
	$(MAKE) -f Makefile_tests test_cli OPENSSL_CMP_SERVER=Mock OPENSSL=$(OPENSSL) \
	|| (($(OPENSSL) version; echo $(OPENSSL_VERSION)) | grep -e "1\.1\|3\.0")
# with OpenSSL 1.1 and 3.0, these Mock genm command test cases fail: 'genm certReqTemplate' 'genm caCerts'

# LwCmp ########################################################################

.phony: test_LwCmp
test_LwCmp:
	$(MAKE) -f Makefile_tests test_cli OPENSSL_CMP_SERVER=LwCmp OPENSSL=$(OPENSSL) \
	|| (($(OPENSSL) version; echo $(OPENSSL_VERSION)) | grep -e "1\.1\|3\.0")
# with OpenSSL 1.1 and 3.0, most LwCmp genm command test cases fail

# clean ########################################################################

.phony: clean
clean:
	@rm -f creds/{manufacturer,operational}.*
	@rm -f creds/{cacerts,extracerts}.pem
	@rm -f creds/InstaDemoCA_client.pem
	@rm -f creds/*_????????-????????-????????-????????-????????.pem
	@rm -f creds/Aventra_Test_Sub_CA_*.pem
	@rm -fr creds/crls
	@rm -f test/recipes/80-test_cmp_http_data/*/test.*cert*.pem
	@rm -f test/recipes/80-test_cmp_http_data/*/{req,rsp}*.der
	@rm -f test/faillog_*.txt
	@rm -fr test/{Upstream,Downstream}
