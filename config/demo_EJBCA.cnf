# For full documentation of the options, see ../doc/cmpClient-cli.{pod,md}

[default]

verbosity = 6 # means INFO (default)
#tls_used = 0 # (default)
#keep_alive = 1 # means preferring to keep the connection open (default)
#msg_timeout = 120 # in seconds (default). 0 means infinite.
msg_timeout = 10
#total_timeout = 0 # in seconds (default). 0 means infinite.
total_timeout = 30
#crls_timeout = 10 # in seconds (default). 0 means infinite.
#ocsp_timeout = 10 # in seconds (default). 0 means infinite.
#digest = sha256 # (default)
#mac = hmac-sha1 # (default)
#ignore_keyusage = 0 # (default)
ignore_keyusage = 1
#san_nodefault = 0 # (default)
#popo = 1 # means SIGNATURE (default)
#revreason = -1 # means none (default)
#use_cdp = 0 # (default)
#use_aia = 0 # (default)
#disable_confirm = 0 # (default)
#unprotected_errors = 0 # (default)
unprotected_errors = 1
cacertsout = creds/docker/cacerts.pem
extracertsout = creds/docker/extracerts.pem
extracerts_dir = creds/docker/

# workarounds in case the environment variables referenced via ${ENV::...} are not set
EJBCA_HOST =
EJBCA_OCSP_URL =
EJBCA_CDP_URL_PREFIX =
EJBCA_CDPS =
EJBCA_CDP_URL_POSTFIX =
EJBCA_CMP_ISSUER =
EJBCA_CMP_CLIENT =
EJBCA_TLS_CLIENT =
EJBCA_CMP_TRUSTED =
EJBCA_TRUSTED =
EJBCA_UNTRUSTED =
EJBCA_CMP_SERVER =
EJBCA_CMP_RECIPIENT =
EJBCA_CMP_SUBJECT =
EJBCA_CMP_SUBJECT_ECC =
DID = did:example:123456789abcdefghi

[EJBCA]
server = ${ENV::EJBCA_HOST}:6080
path = ejbca/publicweb/cmp/cmp_RA
no_proxy = 127.0.0.1,localhost,${ENV::EJBCA_HOST}
secret = pass:SecretCmp
cert = ${ENV::EJBCA_CMP_CLIENT}
key = $cert
keypass = pass:12345
recipient = ${ENV::EJBCA_CMP_RECIPIENT}
subject = ${ENV::EJBCA_CMP_SUBJECT}
#srvcert = ${ENV::EJBCA_CMP_TRUSTED}
trusted = ${ENV::EJBCA_CMP_TRUSTED}, ${ENV::EJBCA_TRUSTED}
out_trusted = ${ENV::EJBCA_CMP_TRUSTED}
tls_trusted = ${ENV::EJBCA_TRUSTED}
#tls_host = $server
tls_cert = ${ENV::EJBCA_TLS_CLIENT}
tls_key = $tls_cert
tls_keypass = pass:12345
tls_used = 0
crls = ${ENV::EJBCA_CDP_URL_PREFIX}CUSTOMER_ISSUING_CA, ${ENV::EJBCA_CDP_URL_PREFIX}CMP_ROOTCA, ${ENV::EJBCA_CDP_URL_PREFIX}TLS_ROOTCA
use_cdp = 1
cdps = ${ENV::EJBCA_CDP_URL_PREFIX}CUSTOMER_ROOTCA, ${ENV::EJBCA_CDP_URL_PREFIX}TLS_ROOTCA
use_aia = 1
ocsp = ${ENV::EJBCA_OCSP_URL}


[no-tls]
server = ${ENV::EJBCA_HOST}:80
tls_used = 0

[no-certstatus]
crls =
use_cdp = 0
cdps =
use_aia = 0
ocsp =

[imprint]
cmd = ir
path = ejbca/publicweb/cmp/cmp_imprint_RA
cert =
key =
newkeytype = EC:secp521r1
newkey = creds/docker/manufacturer.pem # fallback for cmpossl
newkeypass = pass:12345
subject = ${ENV::EJBCA_CMP_SUBJECT_IMPRINT}
reqexts = empty # is ignored by EJBCA
policies = empty
certout = creds/docker/manufacturer.crt
cacerts_dir = creds/docker/trusted
reqout = tmp/imp_reqout1.der,tmp/imp_reqout2.der
rspout = tmp/imp_rspout1.der,tmp/imp_rspout2.der

[bootstrap]
cmd = cr
path = ejbca/publicweb/cmp/cmp_bootstrap_RA
cert = $imprint::certout
key = $imprint::newkey
keypass = $imprint::newkeypass
secret =
newkeytype = EC:prime256v1 # an alias of EC:secp256r1
newkey = creds/operational.pem # fallback for cmpossl
newkeypass = pass:12345
reqexts = reqexts
policies = certificatePolicies
san_nodefault = 1
certout = creds/operational.crt
out_trusted = ${ENV::EJBCA_TRUSTED}
reqout = tmp/boot_reqout1.der,tmp/boot_reqout2.der
rspout = tmp/boot_rspout1.der,tmp/boot_rspout2.der

[update]
path = ejbca/publicweb/cmp/cmp_client
cmd = kur
secret =
cert = $bootstrap::certout
key = $bootstrap::newkey
keypass = $bootstrap::newkeypass
newkeytype = $bootstrap::newkeytype
newkey = $bootstrap::newkey # fallback for cmpossl
newkeypass = $bootstrap::newkeypass
out_trusted = ${ENV::EJBCA_TRUSTED}
reqexts = ""
policies = ""
oldcert = $bootstrap::certout # == cert
subject = ""
implicit_confirm = 1
certout = $bootstrap::certout
reqout = tmp/kur_reqout1.der,tmp/kur_reqout2.der
rspout = tmp/kur_rspout1.der,tmp/kur_rspout2.der

[revoke]
path = ejbca/publicweb/cmp/cmp_client
cmd = rr
secret =
cert = $bootstrap::certout
key = $bootstrap::newkey
keypass = $bootstrap::newkeypass
oldcert = $update::certout # == cert
revreason = 5 #CRL_REASON_CESSATION_OF_OPERATION
subject =
reqout = tmp/rr_reqout1.der,tmp/rr_reqout2.der
rspout = tmp/rr_rspout1.der,tmp/rr_rspout2.der

[pkcs10]
cmd = p10cr
path = ejbca/publicweb/cmp/cmp_bootstrap_RA
cert = $imprint::certout
key = $imprint::newkey
keypass = $imprint::newkeypass
out_trusted = ${ENV::EJBCA_TRUSTED}
secret =
ref = dummy # in EJBCA case there is no ref - fallback for sender as no cert and subject is given
csr = creds/docker/operational.csr # generated by transforming operational.crt
subject =
certout = $bootstrap::certout
reqout = tmp/p10cr_reqout1.der,tmp/p10cr_reqout2.der
rspout = tmp/p10cr_rspout1.der,tmp/p10cr_rspout2.der

[genm]
ref = 3078 # in EJBCA case there is no ref - fallback for sender as no cert and subject is given
cmd = genm
infotype = signKeyPairTypes # default

[validate]
keypass = pass:12345
tls_keypass = $keypass
check_all = 1
use_aia = 0
use_cdp = 1
crl_cache_dir = creds/crls/
verbosity = 6

[empty]
#keyUsage =
#extendedKeyUsage =
#subjectAltName =

[reqexts]
#basicConstraints = CA:FASE
keyUsage = "critical, digitalSignature" # is ignored by EJBCA
extendedKeyUsage = "critical, serverAuth, 1.3.6.1.5.5.7.3.2" # is ignored by EJBCA
subjectAltName = @alt_names

[alt_names]
DNS.0 = localhost
IP.0 = 127.0.0.1
IP.1 = 192.168.0.1
URI.0 = http://192.168.0.2

[certificatePolicies]
certificatePolicies = "critical, @pkiPolicy"

[pkiPolicy]
policyIdentifier = 1.3.6.1.4.1.4329.38.4.2.2
CPS = http://www.my-company.com/pki-policy/
userNotice.1 = @notice

[notice]
explicitText=policy text
