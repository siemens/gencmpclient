=pod

=begin comment
WARNING: do not edit cmpClient-cli.md;
it is generated by 'make doc' from cmpClient-cli.pod

=end comment

=head1 NAME

cmpClient - genCMPClient CLI for the Certificate Management Protocol (RFC4210)

=head1 SYNOPSIS

B<cmpClient> (B<imprint|bootstrap|pkcs10|update|revoke>) [B<-section> I<server>]

In this simple style of invocation, the first argument of the application,
e.g., C<bootstrap>, is mapped to using a section in F<config/demo.cnf>.
The optional server argument may be used to reference a CMP server to be used,
where the default is C<EJBCA>. This is also used as config section name.

B<cmpClient> B<validate> I<options>

In this form of invocation, no CMP command is performed but
a certificate is validated, optionally including revocation status checks.
The target is given by the B<-tls_cert> option if present, otherwise B<-cert>.
In the former case B<-tls_trusted> must be given, otherwise B<-own_trusted>.

Further verification options like B<-untrusted> may be given,
and also the B<-config> and B<-section> options may used as detailed below.
By default, the sections C<EJBCA>,C<validate> of F<config/demo.cnf> are used.

B<cmpClient> I<options>

[B<-help>]
[B<-config> I<filename>]
[B<-section> I<names>]
[B<-verbosity> I<level>]

Generic message options:

[B<-cmd> I<ir|cr|kur|p10cr|rr|genm>]
[B<-infotype> I<name>]
[B<-geninfo> I<OID:int:N>]

Certificate enrollment options:

[B<-newkeytype> EC:I<curve>|RSA-I<len>]
[B<-newkey> I<filename>]
[B<-newkeypass> I<arg>]
[B<-subject> I<name>]
[B<-issuer> I<name>]
[B<-days> I<number>]
[B<-reqexts> I<name>]
[B<-sans> I<spec>]
[B<-san_nodefault>]
[B<-policies> I<name>]
[B<-policy_oids> I<names>]
[B<-policy_oids_critical>]
[B<-popo> I<number>]
[B<-csr> I<filename>]
[B<-out_trusted> I<filenames>]
[B<-verify_hostname> I<cn>]
[B<-verify_ip> I<ip>]
[B<-verify_email> I<email>]
[B<-implicit_confirm>]
[B<-disable_confirm>]
[B<-certout> I<filename>]
[B<-chainout> I<filename>]

Certificate enrollment and revocation options:

[B<-oldcert> I<filename>]
[B<-revreason> I<number>]

Message transfer options:

[B<-server> I<[http://]address[:port]>][/path]
[B<-proxy> I<[http://]address[:port][/path]>]
[B<-no_proxy> I<addresses>]
[B<-recipient> I<name>]
[B<-path> I<remote_path>]
[B<-keep_alive> I<value>]
[B<-msg_timeout> I<seconds>]
[B<-total_timeout> I<seconds>]

Server authentication options:

[B<-trusted> I<filenames>]
[B<-untrusted> I<sources>]
[B<-srvcert> I<filename>]
[B<-expect_sender> I<name>]
[B<-ignore_keyusage>]
[B<-unprotected_errors>]
[B<-srvcertout> I<filename>]
[B<-extracertsout> I<filename>]
[B<-extracerts_dir> I<dirname>]
[B<-extracerts_dir_format> <I<PEM|DER|P12|extension>]
[B<-cacertsout> I<filename>]
[B<-cacerts_dir> I<dirname>]
[B<-cacerts_dir_format> <I<PEM|DER|P12|extension>]

Client authentication and protection options:

[B<-ref> I<value>]
[B<-secret> I<arg>]
[B<-cert> I<filename>]
[B<-own_trusted> I<filenames>]
[B<-key> I<filename>]
[B<-keypass> I<arg>]
[B<-digest> I<name>]
[B<-mac> I<name>]
[B<-extracerts> I<sources>]
[B<-unprotected_requests>]

TLS connection options:

[B<-tls_used>]
[B<-tls_cert> I<filename>]
[B<-tls_key> I<filename>]
[B<-tls_keypass> I<arg>]
[B<-tls_extra> I<filenames>]
[B<-tls_trusted> I<filenames>]
[B<-tls_host> I<name>]

Debugging options:

[B<-reqin>] I<filenames>
[B<-reqin_new_tid>]
[B<-reqout>] I<filenames>
[B<-rspin>] I<filenames>
[B<-rspout>] I<filenames>

Certificate status checking options, for both CMP and TLS:

[B<-check_all>]
[B<-check_any>]
[B<-crls> I<URLs>]
[B<-use_cdp>]
[B<-cdps> I<URLs>]
[B<-cdp_proxy> I<url>]
[B<-crl_cache_dir> I<dirname>]
[B<-crls_timeout> I<seconds>]
[B<-crl_maxdownload_size> I<bytes>]
[B<-use_aia>]
[B<-ocsp> I<URLs>]
[B<-ocsp_timeout> I<seconds>]
[B<-ocsp_last>]
[B<-stapling>]

Certificate verification options, for both CMP and TLS:

[B<-policy> I<arg>]
[B<-purpose> I<purpose>]
[B<-verify_name> I<name>]
[B<-verify_depth> I<num>]
[B<-auth_level> I<level>]
[B<-attime> I<timestamp>]
[B<-ignore_critical>]
[B<-issuer_checks>]
[B<-policy_check>]
[B<-explicit_policy>]
[B<-inhibit_any>]
[B<-inhibit_map>]
[B<-x509_strict>]
[B<-extended_crl>]
[B<-use_deltas>]
[B<-policy_print>]
[B<-check_ss_sig>]
[B<-trusted_first>]
[B<-suiteB_128_only>]
[B<-suiteB_128>]
[B<-suiteB_192>]
[B<-partial_chain>]
[B<-no_alt_chains>]
[B<-no_check_time>]
[B<-allow_proxy_certs>]

=head1 DESCRIPTION

The B<cmpClient> command is a demo and test client implementation
of the Certificate Management Protocol (CMP) as defined in RFC 4210.
It can be used to request certificates from a CA via a CMP server,
to update or revoke them, and to perform other CMP requests.

=head1 USAGE

=over 4

=item B<imprint|bootstrap|pkcs10|update|revoke|genm>

Select demo C<use_case> of the cmpClient application.
The corresponding CMP request will be executed with default settings.
These settings could be adapted via the file 'config/demo.cnf'.

=item List of options available for the C<cmpClient> application:

=back


=head1 OPTIONS

=over 4

=item B<-help>

Display a summary of all options

=item B<-config> I<filename>

Configuration file to use.
An empty string C<""> means none.
Default filename is C<config/demo.cnf>.

=item B<-section> I<names>

Section(s) to use within config file defining CMP options.
An empty string C<""> means no specific section.
Default is C<default>.

Multiple section names may be given, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
Contents of sections named later may override contents of sections named before.
In any case, as usual, the C<[default]> section and finally the unnamed
section (as far as present) can provide per-option fallback values.

=item B<-verbosity> I<level>

Level of verbosity for logging, error output, etc.
0 = EMERG, 1 = ALERT, 2 = CRIT, 3 = ERR, 4 = WARN, 5 = NOTE,
6 = INFO, 7 = DEBUG, 8 = TRACE.
Defaults to 6 = INFO.
The levels DEBUG and TRACE are most useful for certificate status check issues.

=back


=head2 Generic message options

=over 4

=item B<-cmd> I<ir|cr|kur|p10cr|rr|genm>

CMP command to execute.
Overrides C<use_case> if present.
Currently implemented commands are:

=over 8

=item  ir E<nbsp>  - Initialization Request

=item  cr E<nbsp>  - Certificate Request

=item  p10cr - PKCS#10 Certification Request (for legacy support)

=item  kur E<nbsp>E<nbsp>- Key Update Request

=item  rr E<nbsp>  - Revocation Request

=item  genm  - General Message

=back

B<ir> requests initialization of an end entity into a PKI hierarchy
by issuing a first certificate.

B<cr> requests issuing an additional certificate for an end entity already
initialized to the PKI hierarchy.

B<p10cr> requests issuing an additional certificate similarly to B<cr>
but using legacy PKCS#10 CSR format.

B<kur> requests a (key) update for an existing certificate.

B<rr> requests revocation of an existing certificate.

B<genm> requests information using a General Message, where optionally
included B<InfoTypeAndValue>s may be used to state which info is of interest.
Upon receipt of the General Response, information about all received
ITAV B<infoType>s is printed to stdout.

=item B<-infotype> I<name>

Set InfoType name to use for requesting specific info in B<genm>,
e.g., C<signKeyPairTypes>.

=item B<-geninfo> I<values>

A comma-separated list of InfoTypeAndValue to place in the generalInfo field of
the PKIHeader of requests messages.
Each InfoTypeAndValue gives an OID and an integer or string value of the form
I<OID>:int:I<number> or I<OID>:str:I<text>,
e.g., C<'1.2.3.4:int:56789, id-kp:str:name'>.

=back

=head2 Certificate enrollment options

=over 4

=item B<-newkeytype> I<spec>

In case of IR, CR, or KUR,
generate a new key of the given type for the requested certifiate.
The I<spec> may be of the form C<EC:>I<curve> or C<RSA->I<length>".
The key will be saved in the file specified with the B<-newkey> option.

=item B<-newkey> I<filename>

The file to save the newly generated key (in case  B<-newkeytype> is given).
Otherwise the file to read the private or public key from
for the certificate requested in IR, CR or KUR.
Defaults to the public key in the PKCS#10 CSR given with the B<-csr> option,
the public key of the reference certificate, or the current client key.

=item B<-newkeypass> I<arg>

Pass phrase source for the key file given with the B<-newkey> option.
If not given here, the password will be prompted for if needed.

This may be a plain password, which should be preceded by 'pass:',
a key identifier preceded by 'engine:' to use with a crypto engine,
the name of a environment variable preceded by 'env:' to read from,
the name of a file preceded by 'file:' to read from,
the numeric descriptor of a file preceded by 'fd:' to read from,
or 'stdin' to indicate that the password input is to be read from STDIN.

=item B<-subject> I<name>

X509 Distinguished Name (DN) of subject to use in the requested certificate
template.
For KUR, it defaults to the subject
in the PKCS#10 CSR given with the B<-csr> option, if provided,
otherwise the subject of the B<-oldcert>, if provided.
This default is used for IR and CR only if no SANs are set.
If the NULL-DN (C</>) is given then no subject is placed in the template.

If provided and neither of B<-cert>, B<-oldcert>, or B<-csr> is given,
the subject DN is used as fallback sender of outgoing CMP messages.

Special characters may be escaped by C<\> (backslash); whitespace is retained.
Empty values are permitted, but the corresponding type will not be included.
Giving a single C</> will lead to an empty sequence of RDNs (a NULL-DN).
Multi-valued RDNs can be formed by placing a C<+> character instead of a C</>
between the AttributeValueAssertions (AVAs) that specify the members of the set.
Example:

C</DC=org/DC=OpenSSL/DC=users/UID=123456+CN=John Doe>
The argument must be formatted as I</type0=value0/type1=value1/type2=...>.
For details see the description of the B<-recipient> option.

=item B<-issuer> I<name>

X509 issuer Distinguished Name (DN) of the CA server
to place in the requested certificate template in IR/CR/KUR.
If the NULL-DN (C</>) is given then no issuer is placed in the template.

If provided and neither B<-recipient> nor B<-srvcert> is given,
the issuer DN is used as fallback recipient of outgoing CMP messages.

The argument must be formatted as I</type0=value0/type1=value1/type2=...>.
For details see the description of the B<-subject> option.

=item B<-days> I<number>

Number of days the new certificate is requested to be valid for, counting from
the current time of the host.
Also triggers the explicit request that the
validity period starts from the current time (as seen by the host).

=item B<-reqexts> I<name>

Name of section in OpenSSL config file defining certificate request extensions.
If the B<-csr> option is present, these extensions augment the extensions
contained the given PKCS#10 CSR, overriding any extensions with same OIDs.

=item B<-sans> I<spec>

One or more IP addresses, email addresses, DNS names, or URIs
separated by commas or whitespace
(where in the latter case the whole argument must be enclosed in "...")
to add as Subject Alternative Name(s) (SAN) certificate request extension.
If the special element "critical" is given the SANs are flagged as critical.
Cannot be used if any Subject Alternative Name extension is set via B<-reqexts>.

=item B<-san_nodefault>

When Subject Alternative Names are not given via B<-sans>
nor defined via B<-reqexts>,
they are copied by default from the reference certificate (see B<-oldcert>).
This can be disabled by giving the B<-san_nodefault> option.

=item B<-policies> I<name>

Name of section in OpenSSL config file defining policies to be set
as certificate request extension.
This option cannot be used together with B<-policy_oids>.

=item B<-policy_oids> I<names>

One or more OID(s), separated by commas and/or whitespace,
to add as certificate policies request extension.
This option cannot be used together with B<-policies>.

=item B<-policy_oids_critical>

Flag the policies given with B<-policy_oids> as critical.

=item B<-popo> I<number>

Proof-of-Possession (POPO) method to use for IR/CR/KUR; values: C<-1>..<2> where
C<-1> = NONE, C<0> = RAVERIFIED, C<1> = SIGNATURE (default), C<2> = KEYENC.

Note that a signature-based POPO can only produced if a private key
is provided via the B<-newkey> option.

=item B<-csr> I<filename>

PKCS#10 CSR in PEM or DER format containing a certificate request.
With B<-cmd> I<p10cr> it is used directly in a legacy P10CR message.
When used with B<-cmd> I<ir>, I<cr>, or I<kur>, it is transformed into the
respective regular CMP request.
It may also be used with B<-cmd> I<rr> to specify the certificate to be revoked
via the included subject and public key.
Its subject is used as fallback sender in CMP message headers
if B<-cert> and B<-oldcert> are not given.

=item B<-out_trusted> I<filenames>

Trusted certificate(s) to use for verifying the newly enrolled certificate.

Multiple filenames may be given, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
Each source may contain multiple certificates.

The certificate verification options
B<-verify_hostname>, B<-verify_ip>, and B<-verify_email>
only affect the certificate verification enabled via this option.

=item B<-verify_hostname> I<name>

When verification of the newly enrolled certificate is enabled (with the
B<-out_trusted> option), check if any DNS Subject Alternative Name (or if no
DNS SAN is included, the Common Name in the subject) equals the given I<name>.

=item B<-verify_ip> I<ip>

When verification of the newly enrolled certificate is enabled (with the
B<-out_trusted> option), check if there is
an IP address Subject Alternative Name matching the given IP address.

=item B<-verify_email> I<email>

When verification of the newly enrolled certificate is enabled (with the
B<-out_trusted> option), check if there is
an email address Subject Alternative Name matching the given email address.

=item B<-implicit_confirm>

Request implicit confirmation of newly enrolled certificates.

=item B<-disable_confirm>

Do not send certificate confirmation message for newly enrolled certificate
without requesting implicit confirmation
to cope with broken servers not supporting implicit confirmation correctly.
B<WARNING:> This leads to behavior violating RFC 4210.

=item B<-certout> I<filename>

The file where the newly enrolled certificate should be saved.
If B<-newkey> and B<-newkeytype> are given and B<-cmd> is not I<p10cr>
then the related chain and key are stored in this file as well,
else if B<-chainout> is not given the the related chain is stored here as well.

=item B<-chainout> I<filename>

The file where the chain of the newly enrolled certificate should be saved.
If B<-newkey> and B<-newkeytype> are given and B<-cmd> is not I<p10cr>
this option is ignored.

=back


=head2 Certificate enrollment and revocation options

=over 4

=item B<-oldcert> I<filename>

The certificate to be updated (i.e., renewed or re-keyed) in Key Update Request
(KUR) messages or to be revoked in Revocation Request (RR) messages.
For KUR the certificate to be updated defaults to B<-cert>,
and the resulting certificate is called I<reference certificate>.
For RR the certificate to be revoked can also be specified using B<-csr>.

The reference certificate, if any, is also used for
deriving default subject DN and Subject Alternative Names and the
default issuer entry in the requested certificate template of an IR/CR/KUR.
Its subject is used as sender in CMP message headers if B<-cert> is not given.
Its issuer is used as default recipient in CMP message headers
if neither B<-recipient>, B<-srvcert>, nor B<-issuer> is given.

=item B<-revreason> I<number>

Set CRLReason to be included in revocation request (RR); values: C<0>..C<10>
or C<-1> for none (which is the default).

Reason numbers defined in RFC 5280 are:

   CRLReason ::= ENUMERATED {
        unspecified             (0),
        keyCompromise           (1),
        cACompromise            (2),
        affiliationChanged      (3),
        superseded              (4),
        cessationOfOperation    (5),
        certificateHold         (6),
        -- value 7 is not used
        removeFromCRL           (8),
        privilegeWithdrawn      (9),
        aACompromise           (10)
    }

=back


=head2 Message transfer options

=over 4

=item B<-server> I<[http[s]://]address[:port][/path]>

The IP address or DNS hostname and optionally port
of the CMP server to connect to using HTTP(S) transport.
This option excludes I<-rspin>.
The port defaults to 80 or 443 if the scheme is C<https>.
If a path is included it provides the default value for the B<-path> option.

=item B<-proxy> I<[http[s]://]address[:port][/path]>

The HTTP(S) proxy server to use for reaching the CMP server unless B<-no_proxy>
applies, see below.
The proxy port defaults to 80 or 443 if the scheme is C<https>; apart from that
the optional C<http://> or C<https://>prefix and any trailing path are ignored.
Defaults to the environment variable C<http_proxy> if set, else C<HTTP_PROXY>
in case no TLS is used, otherwise C<https_proxy> if set, else C<HTTPS_PROXY>.

=item B<-no_proxy> I<addresses>
List of IP addresses and/or DNS names of servers
not to use an HTTP(S) proxy for, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
Default is from the environment variable C<no_proxy> if set, else C<NO_PROXY>.

=item B<-recipient> I<name>

Distinguished Name (DN) to use in the recipient field of CMP request messages,
i.e., the CMP server (usually the addressed CA).

The recipient field in the header of a CMP message is mandatory.
If not given explicitly the recipient is determined in the following order:
the subject of the CMP server certificate given with the B<-srvcert> option,
the B<-issuer> option,
the issuer of the certificate given with the B<-oldcert> option,
the issuer of the CMP client certificate (B<-cert> option),
the subject of the first certificate given with the B<-untrusted> option,
as far as any of those is present, else the NULL-DN as last resort.

The argument must be formatted as I</type0=value0/type1=value1/type2=...>.
For details see the description of the B<-subject> option.

=item B<-path> I<remote_path>

HTTP path at the CMP server (aka CMP alias) to use for POST requests.
Defaults to any path given with B<-server>, else C<"/">.

=item B<-keep_alive> I<value>

If the given value is 0 then HTTP connections are closed after each response,
which is the default behavior for HTTP 1.0.
If the value is 1 or 2 then persistent connections within a transaction
are requested.
If the value is 2 then persistent connections are required,
i.e., in case the server does not grant them an error occurs.
The default value is 1, which means preferring to keep the connection open.

=item B<-msg_timeout> I<seconds>

Number of seconds (or 0 for infinite) a CMP message round trip is
allowed to take before a timeout error is returned.
Default is 120.

=item B<-total_timeout> I<seconds>

Maximum number seconds an enrollment may take, including attempts polling for
certificates on C<waiting> PKIStatus.
Default is 0 (infinite).

=back


=head2 Server authentication options

=over 4

=item B<-trusted> I<filenames>

When verifying signature-based protection of CMP response messages,
these are the CA certificate(s) to trust while checking certificate chains
during CMP server authentication.
This option gives more flexibility than the B<-srvcert> option because the
protection certificate is not pinned but may be any certificate
for which a chain to one of the given trusted certificates can be constructed.

Multiple filenames may be given, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
Each source may contain multiple certificates.

=item B<-untrusted> I<sources>

Non-trusted intermediate certificate(s).
Any extra certificates given with the B<-cert> option are appended to it.
All these certificates may be useful for cert path construction
for the CMP client certificate (to include in the extraCerts field of outgoing
messages) and for the TLS client certificate (if TLS is enabled)
as well as for chain building
when validating the CMP server certificate (checking signature-based
CMP message protection),
when verifying stapled OCSP responses (while establishing TLS connections), and
when validating newly enrolled certificates.

Multiple filenames or URLs may be given, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
Each file may contain multiple certificates.

=item B<-srvcert> I<filename>

The specific CMP server certificate to expect and directly trust (even if it is
expired) when verifying signature-based protection of CMP response messages.
May be set alternatively to the B<-trusted> option to pin the accepted server.

If set, the subject of the certificate is also used
as default value for the recipient of CMP requests
and as default value for the expected sender of CMP responses.

=item B<-expect_sender> I<name>

Distinguished Name (DN) expected in the sender field of response messages.
Defaults to the subject DN of the pinned B<-srvcert>, if any.

This can be used to make sure that only a particular entity is accepted as
CMP message signer, and attackers are not able to use arbitrary certificates
of a trusted PKI hieararchy to fraudulently pose as CMP server.
Note that this option gives slightly more freedom than setting the B<-srvcert>,
which pins the server to the holder of a particular certificate, while the
expected sender name will continue to match after updates of the server cert.

The argument must be formatted as I</type0=value0/type1=value1/type2=...>.
For details see the description of the B<-recipient> option.

=item B<-ignore_keyusage>

Ignore key usage restrictions in CMP signer certificates when verifying
signature-based protection of incoming CMP messages,
else C<digitalSignature> must be allowed for signer certificate.

=item B<-unprotected_errors>

Accept missing or invalid protection of negative responses from the server.
This applies to the following message types and contents:

=over 4

=item * error messages

=item * negative certificate responses (IP/CP/KUP)

=item * negative revocation responses (RP)

=item * negative PKIConf messages

=back

B<WARNING:> This setting leads to unspecified behavior and it is meant
exclusively to allow interoperability with server implementations violating
RFC 4210, e.g.:

=over 4

=item * section 5.1.3.1 allows exceptions from protecting only for special
cases:
"There MAY be cases in which the PKIProtection BIT STRING is deliberately not
used to protect a message [...] because other protection, external to PKIX, will
be applied instead."

=item * section 5.3.21 is clear on ErrMsgContent: "The CA MUST always sign it
with a signature key."

=item * appendix D.4 shows PKIConf having protection

=back

=item B<-srvcertout> I<filename>

The file where to save the successfully validated certificate, if any,
that the CMP server used for signature-based response message protection.

=item B<-extracertsout> I<filename>

The file where to save any extra certificates received in the extraCerts field
of response messages.

=item B<-extracerts_dir> I<dirname>

Directory to save extra certificates received in the extraCerts field
that are not self-issued.
If given,
the name must end with the (potentally platform-specific) path separator.

=item B<-extracerts_dir_format> <I<PEM|DER|P12|extension>

Certificate file format to use when when the B<-extracerts_dir> option is given.
It may be given in the form of a file name extension, e.g., "crt".
Default is C<pem>.

=item B<-cacertsout> I<filename>

The file where to save any CA certificates received in the caPubs field.

=item B<-cacerts_dir> I<dirname>

Directory to save self-issued (root CA) certificates
received in the caPubs field.
If given,
the name must end with the (potentally platform-specific) path separator.

=item B<-cacerts_dir_format> <I<PEM|DER|P12|extension>

Certificate file format to use when when the B<-cacerts_dir> option is given.
It may be given in the form of a file name extension, e.g., "crt".
Default is C<pem>.

=back


=head2 Client authentication options

=over 4

=item B<-ref> I<value>

Reference number/string/value to use as fallback senderKID; this is required
if no sender name can be determined from the B<-cert> or <-subject> options and
is typically used when authenticating with pre-shared key (password-based MAC).

=item B<-secret> I<arg>

Prefer PBM-based message protection with given source of a secret value.
The secret is used for creating PBM-based protection of outgoing messages
and (as far as needed) for verifying PBM-based protection of incoming messages.
PBM stands for Password-Based Message Authentication Code.
This takes precedence over the B<-cert> and B<-key> options.

Supports plain passwords preceded by "pass:" and others, see B<-newkeypass>.

=item B<-cert> I<filename>

The client's current CMP signer certificate.
Requires for the corresponding key to be given with B<-key>.
The subject of this certificate will be used as sender of outgoing CMP messages,
while the subject of B<-oldcert> or B<-subjectName> may provide fallback values.
The issuer of this certificate is used as one of the recipient fallback values
and as fallback issuer entry in the cerificate template of IR, CR, and KUR.
When using signature-based message protection, this "protection certificate"
will be included first in the extraCerts field of outgoing messages
and the signature is done with the corresponding key.
In Initialization Request (IR) messages this can be used for authenticating
using an external entity certificate as defined in appendix E.7 of RFC 4210.
If the file includes further certs, they are appended to the untrusted certs
because they typically constitute the chain of the client certificate, which
is included in the extraCerts field in signature-protected request messages.

=item B<-own_trusted> I<filenames>

If this list of certificates are provided they are used as trust anchors
to verify the chain building for the own CMP signer certificate.

Multiple filenames may be given, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
Each source may contain multiple certificates.

The certificate verification options
B<-verify_hostname>, B<-verify_ip>, and B<-verify_email>
have no effect on the certificate verification enabled via this option.

=item B<-key> I<filename>

The corresponding private key file for the client's certificate given in
the B<-cert> option.
This will be used for signature-based message protection unless
the B<-secret> option indicating PBM or B<-unprotected_requests> is given.

=item B<-keypass> I<arg>

Pass phrase source for the private key given with the B<-key> option.
Also used for B<-cert> and B<-oldcert> in case it is an encrypted PKCS#12 file.
If not given here, the password will be prompted for if needed.

Supports plain passwords preceded by "pass:" and others, see B<-newkeypass>.

=item B<-digest> I<name>

Specifies name of supported digest to use in RFC 4210's MSG_SIG_ALG
and as the one-way function (OWF) in MSG_MAC_ALG.
If applicable, this is used for message protection and
Proof-of-Possession (POPO) signatures.
To see the list of supported digests, use B<openssl list -digest-commands>.
Defaults to C<sha256>.

=item B<-mac> I<name>

Specifies name of supported digest to use as the MAC algorithm in MSG_MAC_ALG.
To get the names of supported MAC algorithms use B<openssl list -mac-algorithms>
and possibly combine such a name with the name of a supported digest algorithm,
e.g., hmacWithSHA256.
Defaults to C<hmac-sha1> as per RFC 4210.

=item B<-extracerts> I<sources>

Certificates to append in the extraCerts field when sending messages.
They can be used as the default CMP signer certificate chain to include.

Multiple filenames or URLs may be given, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
Each source may contain multiple certificates.

=item B<-unprotected_requests>

Send messages without CMP-level protection.

=back


=head2 TLS connection options

=over 4

=item B<-tls_used>

Enable using TLS (even when other TLS_related options are not set)
for message exchange with CMP server.
The following TLS-related options are ignored if B<-tls_used> is not given.

=item B<-tls_cert> I<filename>

Client's TLS certificate to use for authenticating to the TLS server.
If the file includes further certificates,
they are used for constructing the client cert chain provided to the TLS server.

=item B<-tls_key> I<filename>

Private key for the client's TLS certificate.

=item B<-tls_keypass> I<arg>

Pass phrase source for client's private TLS key B<-tls_key>.
Also used for B<-tls_cert> in case it is an encrypted PKCS#12 file.
If not given here, the password will be prompted for if needed.

Supports plain passwords preceded by "pass:" and others, see B<-newkeypass>.

=item B<-tls_extra> I<filenames>

Extra certificates to provide to the TLS server during handshake.

=item B<-tls_trusted> I<filenames>

Trusted certificate(s) to use for verifying the TLS server certificate.
This implies hostname validation.

Multiple filenames may be given, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
Each source may contain multiple certificates.

The certificate verification options
B<-verify_hostname>, B<-verify_ip>, and B<-verify_email>
have no effect on the certificate verification enabled via this option.

=item B<-tls_host> I<name>

Address to be checked (rather than B<-server> address)
during TLS hostname validation.
This may be a Common Name, a DNS name, or an IP address.

=back


=head2 Debugging options

=over 4

=item B<-reqin> I<filenames>

Take sequence of CMP requests from file(s).

Multiple filenames may be given, separated by commas and/or whitespace
(where in the latter case the whole argument must be enclosed in "...").
As many files are read as needed for a complete transaction.

=item B<-reqin_new_tid>

Use a fresh transactionID for CMP request messages read using B<-reqin>,
which requires re-protecting them as far as they were protected before.
This may be needed in case the sequence of requests is reused
and the CMP server complains that the transaction ID has already been used.

=item B<-reqout> I<filenames>

Save sequence of CMP requests to file(s).

Multiple filenames may be given, separated by commas and/or whitespace.
As many files are written as needed to store the complete transaction.

=item B<-rspin> I<filenames>

Process sequence of CMP responses provided in file(s), skipping server.
This option excludes I<-server>.

Multiple filenames may be given, separated by commas and/or whitespace.
As many files are read as needed for the complete transaction.

=item B<-rspout> I<filenames>

Save sequence of CMP responses to file(s).

Multiple filenames may be given, separated by commas and/or whitespace.
As many files are written as needed to store the complete transaction.

=back


=head2 Certificate status checking options, for both CMP and TLS

The following set of options determine various parameters of
certificate revocation status checking to be performed by the client
on setting up any TLS connection and on checking any signature-based protection
of CMP messages received, but not when verifying newly enrolled certificates.

By default no certificate status checks are performed.
Status checking is demanded if any of the below status checking options are set,
but only as far as a trust store is provided for TLS or at CMP level.
Then by default only the leaf certificates of a chain are checked, i.e.,
the certificates of CMP servers and of TLS servers (as far as TLS is used).
The options B<-check_all> and B<-check_any> may be used to change the extent
of the checks to futher elements in the CA chain of these certificates.

For each certificate for which the status check is demanded the
certification verification procedure will try to obtain the revocation status
first via OCSP stapling if enabled,
then from any locally available CRLs,
then from any Online Certificate Status Protocol (OCSP) responders if enabled,
and finally from CRLs downloaded from certificate distribution points (CDPs)
if enabled.
With the B<-ocsp_last> option CDPs are tried before trying OCSP.
Verification fails if no valid and current revocation status can be found
or the status indicates that the certificate has been revoked.

=over 4

=item B<-check_all>

Check certificate status not only for leaf certificates of a chain
but for all certificates (except root, i.e., self-issued certificates).

=item B<-check_any>

Check certificate status for those certificates (except root certificates)
that contain a CDP or AIA entry (or for which OCSP stapling for TLS is enabled).
This option is overridden by B<-check_all> if set.

=item B<-crls> I<URLs>

Enable CRL-based status checking and
use given CRL(s) as primary source of certificate revocation information.
The URLs argument may contain a single element or
a comma- or whitespace-separated list,
each element starting with C<http:> or C<file:> or being a filename or pathname.

=item B<-use_cdp>

Enable CRL-based status checking and
enable using CRL Distribution Points (CDP) extension entries in certificates.

=item B<-cdps> I<URLs>

Enable CRL-based status checking and
use the given URL(s) as fallback certificate distribution points (CDP).

=item B<-cdp_proxy> I<url>

URL of the proxy server to send CDP URLs to in the form C<url?url=CDP_URL>
or to send issuer Distinguished Names (DNs) to in the form C<url?issuer=DN>.

=item B<-crl_cache_dir> I<dirname>

Directory where to cache CRLs downloaded during verification.
If given, the name must end with the (potentally platform-specific)
path separator.
Then downloaded CRLs will be stored at the given location
using files names uniquely derived from the URL of the CRL distribution point.

=item B<-crls_timeout> I<seconds>

Number of seconds fetching a CRL may take, or 0 for infinite.
A negative value implies the default: 10 seconds.

=item B<-crl_maxdownload_size> I<bytes>

Maximum size of a CRL to be downloaded.
A value of 0 indicates the OpenSSL default, which is 100 kiB.

=item B<-use_aia>

Enable OCSP-based status checking and
enable using Authority Information Access (AIA) OCSP responder entries
in certificates.

=item B<-ocsp> I<URLs>

Enable OCSP-based status checking and
use given OCSP responder URL(s) as fallback.

=item B<-ocsp_timeout> I<seconds>

Number of seconds getting an OCSP response may take, or 0 for infinite.
A negative value implies the default: 10 seconds.

=item B<-ocsp_last>

This option can be used only when OCSP-based checks are enabled using B<-ocsp>
or B<-use_aia>. If checks downloading CRLs from CDPs are also enabled
then do OCSP-based checks last (else before using CRLs downloaded from CDPs).

=item B<-stapling>

Enable the TLS certificate status request extension ("OCSP stapling"),
which is tried first before any other methods of certificate status checking.
This makes sense only if B<-tls_used> is given.
So far OCSP multi-stapling is not supported,
so status information can be obtained in this way only for the leaf certificate
(i.e., the TLS server certificate).

=back


=head2 Certificate verification options, for both CMP and TLS

=over 4

=item B<-policy>, B<-purpose>, B<-verify_name>, B<-verify_depth>,
B<-auth_level>,
B<-attime>,
B<-ignore_critical>,
B<-issuer_checks>],
B<-policy_check>,
B<-explicit_policy>, B<-inhibit_any>, B<-inhibit_map>,
B<-x509_strict>, B<-extended_crl>, B<-use_deltas>,
B<-policy_print>, B<-check_ss_sig>,
B<-trusted_first>,
B<-suiteB_128_only>, B<-suiteB_128>, B<-suiteB_192>,
B<-partial_chain>,
B<-no_check_time>,
B<-allow_proxy_certs>

Set various options of certificate chain verification.
See the L<openssl-verify(1)> manual page
or L<openssl(1)/Verification Options> for details.

=back


=head1 COPYRIGHT

Copyright (c) 2021 Siemens AG.

Licensed under the Apache License, Version 2.0
SPDX-License-Identifier: Apache-2.0

=cut
